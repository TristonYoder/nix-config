# Auto-generated using compose2nix v0.2.0-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."caddy" = {
    image = "tristonyoder/caddy-custom:latest";
    environment = {
      CLOUDFLARE_API_TOKEN = "CPDKOaRIzyonjP63zeyGS1PfRdJ2iaXjRDieYMpE";
    };
    volumes = [
      "/data/docker-appdata/caddy/david.theyoder.family/Caddyfile:/etc/caddy/Caddyfile:rw"
      "/data/docker-appdata/caddy/david.theyoder.family/config:/config:rw"
      "/data/docker-appdata/caddy/david.theyoder.family/data:/data:rw"
    ];
    ports = [
      "80:80/tcp"
      "443:443/tcp"
      "443:443/udp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=caddy"
    ];
  };
  systemd.services."docker-caddy" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    partOf = [
      "docker-compose-caddy-root.target"
    ];
    wantedBy = [
      "docker-compose-caddy-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-caddy-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
