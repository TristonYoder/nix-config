# Auto-generated using compose2nix v0.1.9.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."audiobookshelf" = {
    image = "ghcr.io/advplyr/audiobookshelf";
    volumes = [
      "/data/docker-appdata/audiobookshelf/config:/config:rw"
      "/data/docker-appdata/audiobookshelf/metadata:/metadata:rw"
      "/data/media/Audiobooks:/audiobooks:rw"
      "/data/media/Podcasts:/podcasts:rw"
    ];
    ports = [
      "13378:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=audiobookshelf"
      "--network=audiobooks_default"
    ];
  };
  systemd.services."docker-audiobookshelf" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-audiobooks_default.service"
    ];
    requires = [
      "docker-network-audiobooks_default.service"
    ];
    partOf = [
      "docker-compose-audiobooks-root.target"
    ];
    wantedBy = [
      "docker-compose-audiobooks-root.target"
    ];
  };
  virtualisation.oci-containers.containers."openaudible" = {
    image = "ghcr.io/lanjelin/openaudible-docker:latest";
    environment = {
      PGID = "1000";
      PUID = "1000";
    };
    volumes = [
      "/data/docker-appdata/OpenAudible:/config/OpenAudible:rw"
      "/data/media/Audiobooks:/config/OpenAudible/books:rw"
    ];
    ports = [
      "13379:3000/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=openaudible"
      "--network=audiobooks_default"
    ];
  };
  systemd.services."docker-openaudible" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-audiobooks_default.service"
    ];
    requires = [
      "docker-network-audiobooks_default.service"
    ];
    partOf = [
      "docker-compose-audiobooks-root.target"
    ];
    wantedBy = [
      "docker-compose-audiobooks-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-audiobooks_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f audiobooks_default";
    };
    script = ''
      docker network inspect audiobooks_default || docker network create audiobooks_default
    '';
    partOf = [ "docker-compose-audiobooks-root.target" ];
    wantedBy = [ "docker-compose-audiobooks-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-audiobooks-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
