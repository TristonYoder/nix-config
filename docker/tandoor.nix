# Auto-generated using compose2nix v0.1.9.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."tandoor" = {
    image = "vabene1111/recipes";
    environment = {
      DB_ENGINE = "django.db.backends.postgresql";
      POSTGRES_DB = "djangodb";
      POSTGRES_HOST = "db_tandoor";
      POSTGRES_PASSWORD = "{a_secret_was_here}";
      POSTGRES_PORT = "5432";
      POSTGRES_USER = "djangodb";
      SECRET_KEY = "{a_secret_was_here}";
    };
    volumes = [
      "/data/docker-appdata/tandoor/mediafiles:/opt/recipes/mediafiles:rw"
      "/data/docker-appdata/tandoor/staticfiles:/opt/recipes/staticfiles:rw"
    ];
    ports = [
      "6780:8080/tcp"
    ];
    dependsOn = [
      "tandoor-db_tandoor"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=tandoor"
      "--network=tandoor_default"
    ];
  };
  systemd.services."docker-tandoor" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-tandoor_default.service"
    ];
    requires = [
      "docker-network-tandoor_default.service"
    ];
    partOf = [
      "docker-compose-tandoor-root.target"
    ];
    wantedBy = [
      "docker-compose-tandoor-root.target"
    ];
  };
  virtualisation.oci-containers.containers."tandoor-db_tandoor" = {
    image = "postgres:16-alpine";
    environment = {
      DB_ENGINE = "django.db.backends.postgresql";
      POSTGRES_DB = "djangodb";
      POSTGRES_HOST = "db_tandoor";
      POSTGRES_PASSWORD = "{a_secret_was_here}";
      POSTGRES_PORT = "5432";
      POSTGRES_USER = "djangodb";
      SECRET_KEY = "{a_secret_was_here}";
    };
    volumes = [
      "/data/docker-appdata/tandoor/postgresql:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db_tandoor"
      "--network=tandoor_default"
    ];
  };
  systemd.services."docker-tandoor-db_tandoor" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-tandoor_default.service"
    ];
    requires = [
      "docker-network-tandoor_default.service"
    ];
    partOf = [
      "docker-compose-tandoor-root.target"
    ];
    wantedBy = [
      "docker-compose-tandoor-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-tandoor_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f tandoor_default";
    };
    script = ''
      docker network inspect tandoor_default || docker network create tandoor_default
    '';
    partOf = [ "docker-compose-tandoor-root.target" ];
    wantedBy = [ "docker-compose-tandoor-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-tandoor-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
