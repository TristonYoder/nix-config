# Auto-generated using compose2nix v0.2.0-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."com_carolineyoder-db" = {
    image = "mysql:5.7";
    environment = {
      MYSQL_DATABASE = "wordpress";
      MYSQL_PASSWORD = "{a_secret_was_here}";
      MYSQL_ROOT_PASSWORD = "{a_secret_was_here}";
      MYSQL_USER = "wordpress";
    };
    volumes = [
      "/data/docker-appdata/com-carolineyoder/database:/var/lib/mysql:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=com_carolineyoder_default"
    ];
  };
  systemd.services."docker-com_carolineyoder-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-com_carolineyoder_default.service"
    ];
    requires = [
      "docker-network-com_carolineyoder_default.service"
    ];
    partOf = [
      "docker-compose-com_carolineyoder-root.target"
    ];
    wantedBy = [
      "docker-compose-com_carolineyoder-root.target"
    ];
  };
  virtualisation.oci-containers.containers."com_carolineyoder-wordpress" = {
    image = "wordpress:latest";
    environment = {
      WORDPRESS_DB_HOST = "db:3306";
      WORDPRESS_DB_PASSWORD = "{a_secret_was_here}";
      WORDPRESS_DB_USER = "wordpress";
    };
    volumes = [
      "/data/docker-appdata/com-carolineyoder/wp-backup/:/var/www/html:rw"
    ];
    ports = [
      "1128:80/tcp"
    ];
    dependsOn = [
      "com_carolineyoder-db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=wordpress"
      "--network=com_carolineyoder_default"
    ];
  };
  systemd.services."docker-com_carolineyoder-wordpress" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-com_carolineyoder_default.service"
    ];
    requires = [
      "docker-network-com_carolineyoder_default.service"
    ];
    partOf = [
      "docker-compose-com_carolineyoder-root.target"
    ];
    wantedBy = [
      "docker-compose-com_carolineyoder-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-com_carolineyoder_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f com_carolineyoder_default";
    };
    script = ''
      docker network inspect com_carolineyoder_default || docker network create com_carolineyoder_default
    '';
    partOf = [ "docker-compose-com_carolineyoder-root.target" ];
    wantedBy = [ "docker-compose-com_carolineyoder-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-com_carolineyoder-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
