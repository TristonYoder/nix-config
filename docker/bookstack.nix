# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."bookstack" = {
    image = "lscr.io/linuxserver/bookstack:latest";
    environment = {
      "APP_KEY" = "base64:ye9XTZ4TaQAGXnVxEhJJuaT+nHCeOJ/txOTXwCVdGtY=";
      "APP_URL" = "https://bookstack.tpdemo.theyoder.family/";
      "DB_DATABASE" = "bookstack";
      "DB_HOST" = "mariadb";
      "DB_PASSWORD" = "bookstack8432";
      "DB_PORT" = "3306";
      "DB_USERNAME" = "bookstack";
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Etc/UTC";
    };
    volumes = [
      "/data/docker-appdata/tpdemo/docker-bookstack/config:/config:rw"
    ];
    ports = [
      "6875:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=bookstack"
      "--network=bookstack_default"
    ];
  };
  systemd.services."docker-bookstack" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-bookstack_default.service"
    ];
    requires = [
      "docker-network-bookstack_default.service"
    ];
    partOf = [
      "docker-compose-bookstack-root.target"
    ];
    wantedBy = [
      "docker-compose-bookstack-root.target"
    ];
  };
  virtualisation.oci-containers.containers."mariadb" = {
    image = "lscr.io/linuxserver/mariadb:11.4.8";
    environment = {
      "MYSQL_DATABASE" = "bookstack";
      "MYSQL_PASSWORD" = "bookstack8432";
      "MYSQL_ROOT_PASSWORD" = "mysupersecretrootpassword";
      "MYSQL_USER" = "bookstack";
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Etc/UTC";
    };
    volumes = [
      "/data/docker-appdata/tpdemo/docker-bookstack/db_data:/config:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=mariadb"
      "--network=bookstack_default"
    ];
  };
  systemd.services."docker-mariadb" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-bookstack_default.service"
    ];
    requires = [
      "docker-network-bookstack_default.service"
    ];
    partOf = [
      "docker-compose-bookstack-root.target"
    ];
    wantedBy = [
      "docker-compose-bookstack-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-bookstack_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f bookstack_default";
    };
    script = ''
      docker network inspect bookstack_default || docker network create bookstack_default
    '';
    partOf = [ "docker-compose-bookstack-root.target" ];
    wantedBy = [ "docker-compose-bookstack-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-bookstack-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
