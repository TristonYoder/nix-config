# Auto-generated using compose2nix v0.1.9.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."homarr" = {
    image = "ghcr.io/ajnart/homarr:latest";
    volumes = [
      "/data/docker-appdata/homarr/configs:/app/data/configs:rw"
      "/data/docker-appdata/homarr/data:/data:rw"
      "/data/docker-appdata/homarr/icons:/app/public/icons:rw"
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    ports = [
      "7575:7575/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=homarr"
      "--network=portainer_default"
    ];
  };
  systemd.services."docker-homarr" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-portainer_default.service"
    ];
    requires = [
      "docker-network-portainer_default.service"
    ];
    partOf = [
      "docker-compose-portainer-root.target"
    ];
    wantedBy = [
      "docker-compose-portainer-root.target"
    ];
  };
  virtualisation.oci-containers.containers."portainer-dash" = {
    image = "mauricenino/dashdot:nvidia";
    environment = {
      DASHDOT_WIDGET_LIST = "os,cpu,storage,ram,network,gpu";
    };
    volumes = [
      "/:/mnt/host:ro"
    ];
    ports = [
      "80:3001/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=dash"
      "--network=portainer_default"
      "--privileged"
    ];
  };
  systemd.services."docker-portainer-dash" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-portainer_default.service"
    ];
    requires = [
      "docker-network-portainer_default.service"
    ];
    partOf = [
      "docker-compose-portainer-root.target"
    ];
    wantedBy = [
      "docker-compose-portainer-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-portainer_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f portainer_default";
    };
    script = ''
      docker network inspect portainer_default || docker network create portainer_default
    '';
    partOf = [ "docker-compose-portainer-root.target" ];
    wantedBy = [ "docker-compose-portainer-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-portainer-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
