# Auto-generated using compose2nix v0.1.9.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."portainer_edge_agent" = {
    image = "portainer/agent:latest";
    environment = {
      EDGE = "1";
      EDGE_ID = "315c0a15-0e72-4c09-8f20-a00cd27bb823";
      EDGE_INSECURE_POLL = "1";
      EDGE_KEY = "aHR0cHM6Ly9wb3J0YWluZXIuN2FuZGNvLnN0dWRpb3xwb3J0YWluZXIuN2FuZGNvLnN0dWRpbzo4MDAwfFdxdGxrRHZ4SHBTT1Fja2QzRmV1bnl5Rmw4TzV0TVhJNXFyUzIyY0JYakk9fDQ1";
    };
    volumes = [
      "/:/host:rw"
      "/var/lib/docker/volumes:/var/lib/docker/volumes:rw"
      "/var/run/docker.sock:/var/run/docker.sock:rw"
      "portainer_agent_data:/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=portainer_edge_agent"
      "--network=portainer_default"
    ];
  };
  systemd.services."docker-portainer_edge_agent" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-portainer_default.service"
      "docker-volume-portainer_portainer_agent_data.service"
    ];
    requires = [
      "docker-network-portainer_default.service"
      "docker-volume-portainer_portainer_agent_data.service"
    ];
    partOf = [
      "docker-compose-portainer-root.target"
    ];
    wantedBy = [
      "docker-compose-portainer-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-portainer_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f portainer_default";
    };
    script = ''
      docker network inspect portainer_default || docker network create portainer_default
    '';
    partOf = [ "docker-compose-portainer-root.target" ];
    wantedBy = [ "docker-compose-portainer-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-portainer_portainer_agent_data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect portainer_portainer_agent_data || docker volume create portainer_portainer_agent_data
    '';
    partOf = [ "docker-compose-portainer-root.target" ];
    wantedBy = [ "docker-compose-portainer-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-portainer-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
