# Auto-generated using compose2nix v0.3.2.
{ config, pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Age secrets
  age.secrets.scrypted-watchtower-token = {
    file = ../secrets/scrypted-watchtower-token.age;
    owner = "root";
    group = "root";
    mode = "0400";
  };

  # Containers
  virtualisation.oci-containers.containers."scrypted" = {
    image = "ghcr.io/koush/scrypted";
    environmentFiles = [
      config.age.secrets.scrypted-watchtower-token.path
    ];
    environment = {
      "SCRYPTED_DNS_SERVER_0" = "1.1.1.1";
      "SCRYPTED_DNS_SERVER_1" = "8.8.8.8";
      "SCRYPTED_WEBHOOK_UPDATE" = "http://localhost:10444/v1/update";
      # WATCHTOWER_HTTP_API_TOKEN loaded from secret file
    };
    volumes = [
      "/var/lib/scrypted/volume:/server/volume:rw"
    ];
    labels = {
      "com.centurylinklabs.watchtower.scope" = "scrypted";
    };
    log-driver = "none";
    extraOptions = [
      "--device=/dev/bus/usb:/dev/bus/usb:rwm"
      "--device=/dev/dri:/dev/dri:rwm"
      "--network=host"
    ];
  };
  systemd.services."docker-scrypted" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-scrypted-root.target"
    ];
    wantedBy = [
      "docker-compose-scrypted-root.target"
    ];
  };
  virtualisation.oci-containers.containers."scrypted-watchtower" = {
    image = "containrrr/watchtower";
    environmentFiles = [
      config.age.secrets.scrypted-watchtower-token.path
    ];
    environment = {
      "SCRYPTED_DNS_SERVER_0" = "1.1.1.1";
      "SCRYPTED_DNS_SERVER_1" = "8.8.8.8";
      "WATCHTOWER_HTTP_API_PERIODIC_POLLS" = "true";
      # WATCHTOWER_HTTP_API_TOKEN loaded from secret file
      "WATCHTOWER_HTTP_API_UPDATE" = "true";
      "WATCHTOWER_SCOPE" = "scrypted";
    };
    volumes = [
      "/var/run/docker.sock:/var/run/docker.sock:rw"
    ];
    ports = [
      "10444:8080/tcp"
    ];
    cmd = [ "--interval" "3600" "--cleanup" "--scope" "scrypted" ];
    labels = {
      "com.centurylinklabs.watchtower.scope" = "scrypted";
    };
    log-driver = "journald";
    extraOptions = [
      "--network=host"
    ];
  };
  systemd.services."docker-scrypted-watchtower" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-scrypted-root.target"
    ];
    wantedBy = [
      "docker-compose-scrypted-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-scrypted-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
