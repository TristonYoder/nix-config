# Auto-generated using compose2nix v0.1.9.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."kasm" = {
    image = "lscr.io/linuxserver/kasm:latest";
    environment = {
      DOCKER_MTU = "1500";
      KASM_PORT = "5443";
      NVIDIA_VISIBLE_DEVICES = "all";
    };
    volumes = [
      "/data/docker-appdata/kasm/data:/opt:rw"
      "/data/docker-appdata/kasm/profiles:/profiles:rw"
      "/dev/input:/dev/input:rw"
      "/run/udev/data:/run/udev/data:rw"
    ];
    ports = [
      "3000:3000/tcp"
      "5443:5443/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=kasm"
      "--network=kasm_default"
      "--privileged"
    ];
  };
  systemd.services."docker-kasm" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-kasm_default.service"
    ];
    requires = [
      "docker-network-kasm_default.service"
    ];
    partOf = [
      "docker-compose-kasm-root.target"
    ];
    wantedBy = [
      "docker-compose-kasm-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-kasm_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "${pkgs.docker}/bin/docker network rm -f kasm_default";
    };
    script = ''
      docker network inspect kasm_default || docker network create kasm_default
    '';
    partOf = [ "docker-compose-kasm-root.target" ];
    wantedBy = [ "docker-compose-kasm-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-kasm-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
