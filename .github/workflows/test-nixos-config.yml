name: Test NixOS Flake Configuration

on:
  push:
    branches-ignore: []
  pull_request:
    branches: [ main ]

env:
  MATRIX_HOMESERVER_URL: ${{ secrets.MATRIX_HOMESERVER_URL }}
  MATRIX_ROOM_ID: ${{ secrets.MATRIX_ROOM_ID }}
  MATRIX_ACCESS_TOKEN: ${{ secrets.MATRIX_ACCESS_TOKEN }}

jobs:
  # First, check flake syntax locally (fast fail)
  check-flake-syntax:
    runs-on: ubuntu-latest
    outputs:
      parent_event_id: ${{ steps.send-start-notify.outputs.event_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Notify start
      id: notify-start
      if: always()
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message || github.event.commits[0].message || 'Manual trigger' }}"
        TRUNCATED_MSG=$(echo "$COMMIT_MSG" | head -n 2 | tr '\n' ' ')
        echo "commit_message<<EOF" >> $GITHUB_OUTPUT
        echo "$TRUNCATED_MSG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Send start notification
      id: send-start-notify
      uses: ./.github/actions/matrix-notification
      with:
        message: |
          üß™ Testing NixOS Configuration
          Workflow: Test NixOS Flake Configuration
          Branch: ${{ github.ref_name }}
          Committer: ${{ github.actor }}
          Commit: ${{ steps.notify-start.outputs.commit_message }}
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        homeserver_url: ${{ secrets.MATRIX_HOMESERVER_URL }}
        access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
    
    - name: Notify testing syntax
      id: notify-syntax-start
      uses: ./.github/actions/matrix-notification
      with:
        message: |
          üîµ Testing syntax
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        homeserver_url: ${{ secrets.MATRIX_HOMESERVER_URL }}
        access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
        thread_id: ${{ steps.send-start-notify.outputs['event_id'] }}
      
    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    
    - name: Check flake syntax
      id: syntax-check
      run: |
        echo "Testing flake syntax..."
        nix flake check --all-systems
        echo "‚úÖ Flake syntax check passed!"
        echo "check_result=success" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Notify success
      if: success()
      uses: ./.github/actions/matrix-notification
      with:
        message: |
          ‚úÖ Syntax check passed
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        homeserver_url: ${{ secrets.MATRIX_HOMESERVER_URL }}
        access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
        thread_id: ${{ steps.send-start-notify.outputs['event_id'] }}
        # redact_event_id: ${{ steps.notify-syntax-start.outputs['event_id'] }}
    
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/matrix-notification
      with:
        message: |
          ‚ùå Syntax check failed
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        homeserver_url: ${{ secrets.MATRIX_HOMESERVER_URL }}
        access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
        thread_id: ${{ steps.send-start-notify.outputs['event_id'] }}
        # redact_event_id: ${{ steps.notify-syntax-start.outputs['event_id'] }}
    
    - name: React to parent with failure emoji
      if: failure()
      run: |
        PARENT_EVENT_ID="${{ steps.send-start-notify.outputs['event_id'] }}"
        ROOM_ID_ENCODED=$(echo -n "${{ secrets.MATRIX_ROOM_ID }}" | jq -sRr @uri)
        
        curl -X PUT "${{ secrets.MATRIX_HOMESERVER_URL }}/_matrix/client/r0/rooms/$ROOM_ID_ENCODED/redact/$PARENT_EVENT_ID/react-$(date +%s)" \
          -H "Authorization: Bearer ${{ secrets.MATRIX_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "m.relates_to": {
              "rel_type": "m.annotation",
              "event_id": "'"$PARENT_EVENT_ID"'",
              "key": "‚ùå"
            }
          }' || echo "Reaction failed, continuing..."

  # Test all NixOS configurations
  test-configurations:
    runs-on: ubuntu-latest
    needs: check-flake-syntax
    outputs:
      parent_event_id: ${{ needs.check-flake-syntax.outputs.parent_event_id }}
    strategy:
      matrix:
        host: 
          - name: david
            hostname: david
          - name: pits
            hostname: pits
          # - name: tristons-desk
            # hostname: tristons-desk
      fail-fast: false  # Continue testing other hosts even if one fails
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Notify start
      id: notify-start-test
      if: always()
      uses: ./.github/actions/matrix-notification
      with:
        message: |
          üîµ Testing ${{ matrix.host.name }}
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        homeserver_url: ${{ secrets.MATRIX_HOMESERVER_URL }}
        access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
        thread_id: ${{ needs.check-flake-syntax.outputs.parent_event_id }}
      
    - name: Setup Tailscale
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
        tags: tag:github-actions
        
    - name: Wait for Tailscale connection
      run: sleep 10
      
    - name: Test ${{ matrix.host.name }} Configuration
      run: |
        # Connect to server via Tailscale
        SERVER_HOSTNAME="${{ matrix.host.hostname }}"
        echo "Testing configuration for ${{ matrix.host.name }} on $SERVER_HOSTNAME"
        
        # Configure SSH to bypass host key verification
        mkdir -p ~/.ssh
        echo "Host *" >> ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
        chmod 600 ~/.ssh/config
        
        # Setup SSH key
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        
        # Copy configuration to server
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='*.save' \
          --exclude='nextcloud/admin-pass' \
          ./ ${{ secrets.NIXOS_SERVER_USER }}@$SERVER_HOSTNAME:/tmp/nixos-config-test-${{ matrix.host.name }}/
        
        # Test configuration on server
        ssh ${{ secrets.NIXOS_SERVER_USER }}@$SERVER_HOSTNAME << EOF
          set -e
          
          # Navigate to test directory
          cd /tmp/nixos-config-test-${{ matrix.host.name }}
          
          # Test the NixOS configuration using flake
          echo "Testing NixOS configuration for ${{ matrix.host.name }}..."
          if sudo nixos-rebuild dry-run --flake .#${{ matrix.host.name }}; then
            echo "‚úÖ Configuration test passed for ${{ matrix.host.name }}!"
            echo "SUCCESS" > /tmp/nixos-test-result-${{ matrix.host.name }}.txt
          else
            echo "‚ùå Configuration test failed for ${{ matrix.host.name }}!"
            echo "FAILED" > /tmp/nixos-test-result-${{ matrix.host.name }}.txt
            exit 1
          fi
        EOF
        
        # Get test result
        TEST_RESULT=$(ssh ${{ secrets.NIXOS_SERVER_USER }}@$SERVER_HOSTNAME "cat /tmp/nixos-test-result-${{ matrix.host.name }}.txt")
        
        if [ "$TEST_RESULT" = "SUCCESS" ]; then
          echo "‚úÖ NixOS configuration test passed for ${{ matrix.host.name }}!"
        else
          echo "‚ùå NixOS configuration test failed for ${{ matrix.host.name }}!"
          exit 1
        fi
        
    - name: Set GitHub status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ ${{ matrix.host.name }} configuration test passed"
        else
          echo "‚ùå ${{ matrix.host.name }} configuration test failed"
        fi
    
    - name: Notify success
      if: success()
      uses: ./.github/actions/matrix-notification
      with:
        message: |
          ‚úÖ ${{ matrix.host.name }} passed
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        homeserver_url: ${{ secrets.MATRIX_HOMESERVER_URL }}
        access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
        thread_id: ${{ needs.check-flake-syntax.outputs.parent_event_id }}
        # redact_event_id: ${{ steps.notify-start-test.outputs['event_id'] }}
    
    - name: Notify failure
      if: failure()
      uses: ./.github/actions/matrix-notification
      with:
        message: |
          ‚ùå ${{ matrix.host.name }} failed
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        homeserver_url: ${{ secrets.MATRIX_HOMESERVER_URL }}
        access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
        thread_id: ${{ needs.check-flake-syntax.outputs.parent_event_id }}
        # redact_event_id: ${{ steps.notify-start-test.outputs['event_id'] }}
    
    - name: React to parent with failure emoji
      if: failure()
      run: |
        PARENT_EVENT_ID="${{ needs.check-flake-syntax.outputs.parent_event_id }}"
        ROOM_ID_ENCODED=$(echo -n "${{ secrets.MATRIX_ROOM_ID }}" | jq -sRr @uri)
        
        curl -X PUT "${{ secrets.MATRIX_HOMESERVER_URL }}/_matrix/client/r0/rooms/$ROOM_ID_ENCODED/send/m.reaction/$(openssl rand -hex 16)" \
          -H "Authorization: Bearer ${{ secrets.MATRIX_ACCESS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "m.relates_to": {
              "rel_type": "m.annotation",
              "event_id": "'"$PARENT_EVENT_ID"'",
              "key": "‚ùå"
            }
          }' || echo "Reaction failed, continuing..."