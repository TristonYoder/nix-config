name: Deploy NixOS Flake Configuration

on:
  workflow_run:
    workflows: ["Test NixOS Flake Configuration"]
    types: [ completed ]
    branches: [ main ]

jobs:
  deploy-configuration:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Tailscale
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
        tags: tag:github-actions
        
    - name: Wait for Tailscale connection
      run: sleep 10
      
    - name: Deploy NixOS Flake Configuration
      run: |
        # Connect to server via Tailscale
        SERVER_HOSTNAME="${{ secrets.NIXOS_SERVER_HOSTNAME }}"
        echo "Connecting to server at $SERVER_HOSTNAME"
        
        # Configure SSH to bypass host key verification
        mkdir -p ~/.ssh
        echo "Host $SERVER_HOSTNAME" >> ~/.ssh/config
        echo "  StrictHostKeyChecking no" >> ~/.ssh/config
        echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
        chmod 600 ~/.ssh/config
        
        # Copy configuration to server
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='*.save' \
          --exclude='nextcloud/admin-pass' \
          ./ ${{ secrets.NIXOS_SERVER_USER }}@$SERVER_HOSTNAME:/tmp/nixos-config-deploy/
        
        # Deploy flake configuration on server
        ssh ${{ secrets.NIXOS_SERVER_USER }}@$SERVER_HOSTNAME << 'EOF'
          set -e
          
          # Navigate to deploy directory
          cd /tmp/nixos-config-deploy
          
          # Create backup directory if it doesn't exist
          sudo mkdir -p /var/backups/nixos
          
          # Create timestamped backup of current flake configuration
          BACKUP_NAME="flake_config_$(date +%Y%m%d_%H%M%S)"
          sudo mkdir -p /var/backups/nixos/$BACKUP_NAME
          
          # Backup current flake configuration if it exists
          if [ -d "/etc/nixos" ]; then
            sudo cp -r /etc/nixos/. /var/backups/nixos/$BACKUP_NAME/ 2>/dev/null || true
          fi
          
          # Keep only last 10 backups
          sudo find /var/backups/nixos -maxdepth 1 -type d -name "flake_config_*" | sort | head -n -10 | xargs -r sudo rm -rf
          
          # Test flake syntax first
          echo "Testing flake syntax..."
          if ! nix flake check; then
            echo "❌ Flake syntax check failed! Aborting deployment."
            exit 1
          fi
          
          # Final test before deployment using flake
          echo "Running final configuration test with flake..."
          if ! sudo nixos-rebuild dry-run --flake .#david; then
            echo "❌ Final configuration test failed! Aborting deployment."
            exit 1
          fi
          
          # Deploy the configuration using flake
          echo "Deploying NixOS configuration with flake..."
          if sudo nixos-rebuild switch --flake .#david; then
            echo "✅ NixOS configuration deployed successfully!"
            echo "SUCCESS" > /tmp/nixos-deploy-result.txt
          else
            echo "❌ NixOS configuration deployment failed!"
            echo "FAILED" > /tmp/nixos-deploy-result.txt
            exit 1
          fi
        EOF
        
        # Get deployment result
        DEPLOY_RESULT=$(ssh ${{ secrets.NIXOS_SERVER_USER }}@$SERVER_HOSTNAME "cat /tmp/nixos-deploy-result.txt")
        
        if [ "$DEPLOY_RESULT" = "SUCCESS" ]; then
          echo "✅ NixOS configuration deployed successfully!"
        else
          echo "❌ NixOS configuration deployment failed!"
          exit 1
        fi
        
    - name: Create GitHub Deployment
      if: success()
      run: |
        echo "✅ NixOS configuration successfully deployed to production"
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ NixOS configuration deployment failed"
        echo "Check the server logs for more details"